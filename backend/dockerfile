# backend/Dockerfile

# 가볍고 안정적인 Python 공식 이미지를 기반으로 사용합니다.
# slim 버전은 이미지가 더 작습니다. 원하는 Python 버전으로 변경할 수 있습니다.
FROM python:3.9-slim

# 컨테이너 내부의 작업 디렉토리를 설정합니다.
WORKDIR /app

# Docker build context (backend/ 디렉토리)에서 requirements.txt 파일을 컨테이너 내부로 복사합니다.
COPY requirements.txt .

# requirements.txt에 명시된 파이썬 라이브러리들을 설치합니다.
# --no-cache-dir: 캐시를 사용하지 않아 이미지 크기를 줄입니다.
# --upgrade pip: pip 버전을 최신으로 업데이트합니다.
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Docker build context (backend/ 디렉토리)의 모든 파일/디렉토리를 컨테이너 내부의 작업 디렉토리(/app)로 복사합니다.
# 이렇게 하면 app/, .env 등 필요한 모든 파일이 컨테이너 안에 들어갑니다.
COPY . .

# 애플리케이션이 실행될 포트(FastAPI 기본 포트 8000)를 외부에 노출합니다.
# 이는 정보 제공 목적이며, 실제로 호스트 포트와 연결은 docker-compose.yml에서 설정합니다.
EXPOSE 8000

# 컨테이너가 시작될 때 실행될 기본 명령어입니다.
# 이 명령은 docker-compose.yml에서 'command' 지시문으로 오버라이드될 수 있습니다 (예: 워커 서비스).
# --host 0.0.0.0: 컨테이너 외부에서 접속 가능하도록 합니다.
# --reload: 코드 변경 시 자동 재시작 (개발 시 유용, 프로덕션에서는 제거)
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

# 참고: 실제 프로덕션 환경에서는 .env 파일을 이미지에 포함시키지 않고
# Kubernetes Secrets, 환경 변수 주입 등 더 안전한 방식으로 관리하는 것이 권장됩니다.
# 개발/테스트 편의를 위해 현재는 포함합니다.
